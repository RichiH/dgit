#!/usr/bin/perl -w
# dgit
# Integration between git and Debian-style archives
#
# Copyright (C)2013 Ian Jackson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;

use IO::Handle;
use Data::Dumper;
use LWP::UserAgent;
use Dpkg::Control::Hash;
use File::Path;
use POSIX;

our $suite = 'sid';
our $package;

our $sign = 1;
our $dryrun = 0;
our $changesfile;

our %format_ok = map { $_=>1 } ("1.0","3.0 (native)","3.0 (quilt)");

our (@git) = qw(git);
our (@dget) = qw(dget);
our (@dput) = qw(dput);
our (@debsign) = qw(debsign);
our $keyid;

our $debug = 0;
open DEBUG, ">/dev/null" or die $!;

our %opts_opt_map = ('dget' => \@dget,
		     'dput' => \@dput,
		     'debsign' => \@debsign);

our $remotename = 'dgit';
our $ourdscfield = 'Vcs-Git-Master';
our $branchprefix = 'dgit';

sub lbranch () { return "$branchprefix/$suite"; }
my $lbranch_re = '^refs/heads/'.$branchprefix.'/([^/.]+)$';
sub lref () { return "refs/heads/".lbranch(); }
sub lrref () { return "refs/remotes/$remotename/$suite"; }
sub rrref () { return "refs/$branchprefix/$suite"; }
sub debiantag ($) { return "debian/$_[0]"; }

sub fetchspec () {
    local $suite = '*';
    return  "+".rrref().":".lrref();
}

our $ua;

sub url_get {
    if (!$ua) {
	$ua = LWP::UserAgent->new();
	$ua->env_proxy;
    }
    print "downloading @_...\n";
    my $r = $ua->get(@_) or die $!;
    die "$_[0]: ".$r->status_line."; failed.\n" unless $r->is_success;
    return $r->decoded_content();
}

our ($dscdata,$dscurl,$dsc);

sub printcmd {
    my $fh = shift @_;
    my $intro = shift @_;
    print $fh $intro or die $!;
    local $_;
    foreach my $a (@_) {
	$_ = $a;
	if (s{['\\]}{\\$&}g || m{\s} || m{[^-_./0-9a-z]}i) {
	    print $fh " '$_'" or die $!;
	} else {
	    print $fh " $_" or die $!;
	}
    }
    print $fh "\n" or die $!;
}

sub runcmd {
    printcmd(\*DEBUG,"+",@_) if $debug>0;
    $!=0; $?=0;
    die "@_ $! $?" if system @_;
}

sub cmdoutput_errok {
    die Dumper(\@_)." ?" if grep { !defined } @_;
    printcmd(\*DEBUG,"|",@_) if $debug>0;
    open P, "-|", @_ or die $!;
    my $d;
    $!=0; $?=0;
    { local $/ = undef; $d = <P>; }
    die if P->error;
    close P or return undef;
    chomp $d;
    return $d;
}

sub cmdoutput {
    my $d = cmdoutput_errok @_;
    defined $d or die "@_ $? $!";
    return $d;
}

sub dryrun_report {
    printcmd(\*STDOUT,"#",@_);
}

sub runcmd_ordryrun {
    if (!$dryrun) {
	runcmd @_;
    } else {
	dryrun_report @_;
    }
}

our %defcfg = ('dgit.default.distro' => 'debian',
	       'dgit.default.username' => '',
	       'dgit.default.ssh' => 'ssh',
	       'dgit-distro.debian.git-host' => 'git.debian.org',
	       'dgit-distro.debian.git-proto' => 'git+ssh://',
	       'dgit-distro.debian.git-path' => '/git/dgit-repos',
	       'dgit-distro.debian.git-check' => 'ssh-cmd',
	       'dgit-distro.debian.git-create' => 'ssh-cmd',
	       'dgit-distro.debian.mirror' => 'http://ftp.debian.org/debian/');

sub cfg {
    foreach my $c (@_) {
	my $v;
	{
	    local ($debug) = $debug-1;
	    $v = cmdoutput_errok(@git, qw(config --), $c);
	};
	if ($?==0) {
	    chomp $v;
	    return $v;
	} elsif ($?!=256) {
	    die "$c $?";
	}
	my $dv = $defcfg{$c};
	return $dv if defined $dv;
    }
    return undef;
}

sub access_distro () {
    return cfg("dgit-suite.$suite.distro",
	       "dgit.default.distro");
}

sub access_cfg ($) {
    my ($key) = @_;
    my $distro = access_distro();
    my $value = cfg("dgit-distro.$distro.$key",
		    "dgit.default.$key");
    return $value;
}

sub access_gituserhost () {
    my $user = access_cfg('git-user');
    my $host = access_cfg('git-host');
    return defined($user) && length($user) ? "$user\@$host" : $host;
}

sub access_giturl () {
    my $url = access_cfg('git-url');
    if (!defined $url) {
	$url =
	    access_cfg('git-proto').
	    access_gituserhost().
	    access_cfg('git-path');
    }
    return "$url/$package.git";
}	       

sub parsecontrol {
    my $c = Dpkg::Control::Hash->new();
    $c->load(@_) or return undef;
    return $c;
}

sub parsechangelog {
    my $c = Dpkg::Control::Hash->new();
    my $p = new IO::Handle;
    open $p, '-|', qw(dpkg-parsechangelog) or die $!;
    $c->parse($p);
    $?=0; $!=0; close $p or die "$! $?";
    return $c;
}

our $rmad;

sub archive_query () {
    my $query = access_cfg('archive-query');
    $query ||= "madison:".access_distro();
    $query =~ s/^(\w+):// or die "$query ?";
    my $proto = $1;
    my $url = $'; #';
    die unless $proto eq 'madison';
    $rmad ||= cmdoutput qw(rmadison -asource),"-s$suite","-u$url",$package;
    $rmad =~ m/^ \s*( [^ \t|]+ )\s* \|
                 \s*( [^ \t|]+ )\s* \|
                 \s*( [^ \t|]+ )\s* \|
                 \s*( [^ \t|]+ )\s* /x or die "$rmad $?";
    $1 eq $package or die "$rmad $package ?";
    my $vsn = $2;
    if ($suite ne $3) {
	# madison canonicalises for us
	print "canonical suite name for $suite is $3\n";
	$suite = $3;
    }
    $4 eq 'source' or die "$rmad ?";
    my $prefix = substr($package, 0, $package =~ m/^l/ ? 4 : 1);
    my $subpath = "/pool/main/$prefix/$package/${package}_$vsn.dsc";
    return ($vsn,$subpath);
}

sub canonicalise_suite () {
    archive_query();
}

sub get_archive_dsc () {
    my ($vsn,$subpath) = archive_query();
    # fixme madison does not show us the component
    $dscurl = access_cfg('mirror').$subpath;
    $dscdata = url_get($dscurl);
    my $dscfh = new IO::File \$dscdata, '<' or die $!;
    print DEBUG Dumper($dscdata) if $debug>1;
    $dsc = Dpkg::Control::Hash->new(allow_pgp=>1);
    $dsc->parse($dscfh, 'dsc') or die "parsing of $dscurl failed\n";
    print DEBUG Dumper($dsc) if $debug>1;
    my $fmt = $dsc->{Format};
    die "unsupported format $fmt, sorry\n" unless $format_ok{$fmt};
}

sub check_for_git () {
    # returns 0 or 1
    my $how = access_cfg('git-check');
    if ($how eq 'ssh-cmd') {
	my $r= cmdoutput
	    (access_cfg('ssh'),access_gituserhost(),
	     " set -e; cd ".access_cfg('git-path').";".
	     " if test -d $package.git; then echo 1; else echo 0; fi");
	print DEBUG "got \`$r'\n";
	die "$r $! $?" unless $r =~ m/^[01]$/;
	return $r+0;
    } else {
	die "unknown git-check $how ?";
    }
}

sub create_remote_git_repo () {
    my $how = access_cfg('git-create');
    if ($how eq 'ssh-cmd') {
	runcmd_ordryrun
	    (access_cfg('ssh'),access_gituserhost(),
	     "set -e; cd ".access_cfg('git-path').";".
	     " mkdir -p $package.git;".
	     " cd $package.git;".
	     " if ! test -d objects; then git init --bare; fi");
    } else {
	die "unknown git-create $how ?";
    }
}

our ($dsc_hash,$upload_hash);

our $ud = '.git/dgit/unpack';

sub prep_ud () {
    rmtree($ud);
    mkpath '.git/dgit';
    mkdir $ud or die $!;
}

sub mktree_in_ud_from_only_subdir () {
    # changes into the subdir
    my (@dirs) = <*/.>;
    die unless @dirs==1;
    $dirs[0] =~ m#^([^/]+)/\.$# or die;
    my $dir = $1;
    chdir $dir or die "$dir $!";
    die if stat '.git';
    die $! unless $!==&ENOENT;
    runcmd qw(git init -q);
    rmtree('.git/objects');
    symlink '../../../../objects','.git/objects' or die $!;
    runcmd @git, qw(add -Af);
    my $tree = cmdoutput @git, qw(write-tree);
    chomp $tree; $tree =~ m/^\w+$/ or die "$tree ?";
    return ($tree,$dir);
}

sub dsc_files () {
    map {
	m/^\w+ \d+ (\S+)$/ or die "$_ ?";
	$1;
    } grep m/\S/, split /\n/, ($dsc->{'Checksums-Sha256'} || $dsc->{Files});
}

sub is_orig_file ($) {
    local ($_) = @_;
    m/\.orig(?:-\w+)?\.tar\.\w+$/;
}

sub generate_commit_from_dsc () {
    prep_ud();
    chdir $ud or die $!;
    my @files;
    foreach my $f (dsc_files()) {
	die if $f =~ m#/|^\.|\.dsc$|\.tmp$#;
	push @files, $f;
	link "../../../$f", $f
	    or $!==&ENOENT
	    or die "$f $!";
    }
    runcmd @dget, qw(--), $dscurl;
    foreach my $f (grep { is_orig_file($_) } @files) {
	link $f, "../../../../$f"
	    or $!==&EEXIST
	    or die "$f $!";
    }
    my ($tree,$dir) = mktree_in_ud_from_only_subdir();
    runcmd qw(sh -ec), 'dpkg-parsechangelog >../changelog.tmp';
    my $clogp = parsecontrol('../changelog.tmp','changelog') or die;
    my $date = cmdoutput qw(date), '+%s %z', qw(-d),$clogp->{Date};
    my $author = $clogp->{Maintainer};
    $author =~ s#,.*##ms;
    my $authline = "$author $date";
    $authline =~ m/^[^<>]+ \<\S+\> \d+ [-+]\d+$/ or die $authline;
    open C, ">../commit.tmp" or die $!;
    print C "tree $tree\n" or die $!;
    print C "parent $upload_hash\n" or die $! if $upload_hash;
    print C <<END or die $!;
author $authline
committer $authline

$clogp->{Changes}

# imported by dgit from the archive
END
    close C or die $!;
    my $commithash = cmdoutput @git, qw(hash-object -w -t commit ../commit.tmp);
    print "synthesised git commit from .dsc $clogp->{Version}\n";
    chdir '../../../..' or die $!;
    cmdoutput @git, qw(update-ref -m),"dgit synthesise $clogp->{Version}",
              'DGIT_ARCHIVE', $commithash;
    cmdoutput @git, qw(log -n2), $commithash;
    # ... gives git a chance to complain if our commit is malformed
    my $outputhash = $commithash;
    if ($upload_hash) {
	chdir "$ud/$dir" or die $!;
	runcmd @git, qw(reset --hard), $upload_hash;
	runcmd qw(sh -ec), 'dpkg-parsechangelog >>../changelogold.tmp';
	my $oldclogp = Dpkg::Control::Hash->new();
	$oldclogp->parse('../changelogold.tmp','previous changelog') or die;
	my $vcmp =
	    version_compare_string($oldclogp->{Version}, $clogp->{Version});
	if ($vcmp < 0) {
	    # git upload/ is earlier vsn than archive, use archive
	} elsif ($vcmp >= 0) {
	    print STDERR <<END or die $!;
Version actually in archive:    $clogp->{Version} (older)
Last allegedly pushed/uploaded: $oldclogp->{Version} (newer or same)
Perhaps the upload is stuck in incoming.  Using the version from git.
END
	} else {
	    die "version in archive is same as version in git".
		" to-be-uploaded (upload/) branch but archive".
		" version hash no commit hash?!\n";
        }
	chdir '../../../..' or die $!;
    }
    rmtree($ud);
    return $outputhash;
}

sub ensure_we_have_orig () {
    foreach my $f (dsc_files()) {
	next unless is_orig_file($f);
	if (stat "../$f") {
	    die "$f ?" unless -f _;
	} else {
	    die "$f $!" unless $!==&ENOENT;
	}
	my $origurl = $dscurl;
	$origurl =~ s{/[^/]+$}{};
	$origurl .= "/$f";
	die "$f ?" unless $f =~ m/^${package}_/;
	die "$f ?" if $f =~ m#/#;
	runcmd_ordryrun qw(sh -ec),'cd ..; exec "$@"','x',
	    @dget,'--',$origurl;
    }
}

sub rev_parse ($) {
    return cmdoutput @git, qw(rev-parse), "$_[0]~0";
}

sub is_fast_fwd ($$) {
    my ($ancestor,$child) = @_;
    my $mb = cmdoutput @git, qw(merge-base), $dsc_hash, $upload_hash;
    return rev_parse($mb) eq rev_parse($ancestor);
}

sub git_fetch_us () {
    die "cannot dry run with fetch" if $dryrun;
    runcmd @git, qw(fetch),access_giturl(),fetchspec();
}

sub fetch_from_archive () {
    # ensures that lrref() is what is actually in the archive,
    #  one way or another
    get_archive_dsc();
    $dsc_hash = $dsc->{$ourdscfield};
    if (defined $dsc_hash) {
	$dsc_hash =~ m/\w+/ or die "$dsc_hash $?";
	$dsc_hash = $&;
	print "last upload to archive specified git hash\n";
    } else {
	print "last upload to archive has NO git hash\n";
    }

    $!=0; $upload_hash =
	cmdoutput_errok @git, qw(show-ref --heads), lrref();
    if ($?==0) {
	die unless chomp $upload_hash;
    } elsif ($?==256) {
	$upload_hash = '';
    } else {
	die $?;
    }
    my $hash;
    if (defined $dsc_hash) {
	die "missing git history even though dsc has hash"
	    unless $upload_hash;
	$hash = $dsc_hash;
	ensure_we_have_orig();
    } else {
	$hash = generate_commit_from_dsc();
    }
    if ($upload_hash) {
	die "not fast forward on last upload branch!".
	    " (archive's version left in DGIT_ARCHIVE)"
	    unless is_fast_fwd($dsc_hash, $upload_hash);
    }
    if ($upload_hash ne $hash) {
	my @upd_cmd = (@git, qw(update-ref -m), 'dgit fetch', lrref(), $hash);
	if (!$dryrun) {
	    cmdoutput @upd_cmd;
	} else {
	    dryrun_report @upd_cmd;
	}
    }
}

sub clone ($) {
    my ($dstdir) = @_;
    die "dry run makes no sense with clone" if $dryrun;
    mkdir $dstdir or die "$dstdir $!";
    chdir "$dstdir" or die "$dstdir $!";
    runcmd @git, qw(init -q);
    runcmd @git, qw(config), "remote.$remotename.fetch", fetchspec();
    open H, "> .git/HEAD" or die $!;
    print H "ref: ".lref()."\n" or die $!;
    close H or die $!;
    runcmd @git, qw(remote add), 'origin', access_giturl();
    if (check_for_git()) {
	print "fetching existing git history\n";
	git_fetch_us();
	runcmd @git, qw(fetch origin);
    } else {
	print "starting new git history\n";
    }
    fetch_from_archive();
    runcmd @git, qw(reset --hard), lrref();
    print "ready for work in $dstdir\n";
}

sub fetch () {
    if (check_for_git()) {
	git_fetch_us();
    }
    fetch_from_archive();
}

sub pull () {
    fetch();
    runcmd_ordryrun @git, qw(merge -m),"Merge from $suite [dgit]",
        lrref();
}

sub dopush () {
    runcmd @git, qw(diff --quiet HEAD);
    my $clogp = parsechangelog();
    $package = $clogp->{Source};
    my $dscfn = "${package}_$clogp->{Version}.dsc";
    stat "../$dscfn" or die "$dscfn $!";
    $dsc = parsecontrol("../$dscfn");
    prep_ud();
    chdir $ud or die $!;
    print "checking that $dscfn corresponds to HEAD\n";
    runcmd qw(dpkg-source -x --), "../../../../$dscfn";
    my ($tree,$dir) = mktree_in_ud_from_only_subdir();
    chdir '../../../..' or die $!;
    runcmd @git, qw(diff --exit-code), $tree;
#fetch from alioth
#do fast forward check and maybe fake merge
#    if (!is_fast_fwd(mainbranch
#    runcmd @git, qw(fetch -p ), "$alioth_git/$package.git",
#        map { lref($_).":".rref($_) }
#        (uploadbranch());
    $dsc->{$ourdscfield} = rev_parse('HEAD');
    $dsc->save("../$dscfn.tmp") or die $!;
    if (!$dryrun) {
	rename "../$dscfn.tmp","../$dscfn" or die "$dscfn $!";
    } else {
	print "[new .dsc left in $dscfn.tmp]\n";
    }
    if (!$changesfile) {
	my $pat = "../${package}_$clogp->{Version}_*.changes";
	my @cs = glob $pat;
        die "$pat ?" unless @cs==1;
	($changesfile) = @cs;
    }
    my $tag = debiantag($dsc->{Version});
    if (!check_for_git()) {
	create_remote_git_repo();
    }
    runcmd_ordryrun @git, qw(push),access_giturl(),"HEAD:".rrref();
    if ($sign) {
	my @tag_cmd = (@git, qw(tag -s -m),
		       "Release $dsc->{Version} for $suite [dgit]");
	push @tag_cmd, qw(-u),$keyid if defined $keyid;
	push @tag_cmd, $tag;
	runcmd_ordryrun @tag_cmd;
	my @debsign_cmd = @debsign;
	push @debsign_cmd, "-k$keyid" if defined $keyid;
	push @debsign_cmd, $changesfile;
	runcmd_ordryrun @debsign_cmd;
    }
    runcmd_ordryrun @git, qw(push),access_giturl(),"refs/tags/$tag";
    my $host = access_cfg('upload-host');
    my @hostarg = defined($host) ? ($host,) : ();
    runcmd_ordryrun @dput, @hostarg, $changesfile;
}

sub cmd_clone {
    my $dstdir;
    die if defined $package;
    if (@ARGV==1) {
	($package) = @ARGV;
    } elsif (@ARGV==2 && $ARGV[1] =~ m#^\w#) {
	($package,$suite) = @ARGV;
    } elsif (@ARGV==2 && $ARGV[1] =~ m#^[./]#) {
	($package,$dstdir) = @ARGV;
    } elsif (@ARGV==3) {
	($package,$suite,$dstdir) = @ARGV;
    } else {
	die;
    }
    $dstdir ||= "$package";
    clone($dstdir);
}

sub branchsuite () {
    my $branch = cmdoutput_errok @git, qw(symbolic-ref HEAD);
    chomp $branch;
    if ($branch =~ m#$lbranch_re#o) {
	return $1;
    } else {
	return undef;
    }
}

sub fetchpullargs () {
    if (!defined $package) {
	my $sourcep = parsecontrol('debian/control');
	$package = $sourcep->{Source};
    }
    if (@ARGV==0) {
	$suite = branchsuite();
	if (!$suite) {
	    my $clogp = parsechangelog();
	    $suite = $clogp->{Distribution};
	}
	canonicalise_suite();
	print "fetching from suite $suite\n";
    } elsif (@ARGV==1) {
	($suite) = @ARGV;
	canonicalise_suite();
    } else {
	die;
    }
}

sub cmd_fetch {
    fetchpullargs();
    fetch();
}

sub cmd_pull {
    fetchpullargs();
    pull();
}

sub cmd_push {
    die if defined $package;
    my $clogp = parsechangelog();
    $package = $clogp->{Source};
    if (@ARGV==0) {
	$suite = $clogp->{Distribution};
	canonicalise_suite();
    } else {
	die;
    }
    dopush();
}

sub cmd_build {
    die if defined $package;
    my $clogp = parsechangelog();
    $suite = $clogp->{Distribution};
    $package = $clogp->{Source};
    canonicalise_suite();
    runcmd_ordryrun
	qw(git-buildpackage -us -uc --git-no-sign-tags),
            "--git-debian-branch=".lbranch(),
            @ARGV;
}

sub parseopts () {
    my $om;
    while (@ARGV) {
	last unless $ARGV[0] =~ m/^-/;
	$_ = shift @ARGV;
	last if m/^--?$/;
	if (m/^--/) {
	    if (m/^--dry-run$/) {
		$dryrun=1;
	    } elsif (m/^--no-sign$/) {
		$sign=0;
	    } elsif (m/^--(\w+)=(.*)/s && ($om = $opts_opt_map{$1})) {
		$om->[0] = $2;
	    } elsif (m/^--(\w+):(.*)/s && ($om = $opts_opt_map{$1})) {
		push @$om, $2;
	    } else {
		die "$_ ?";
	    }
	} else {
	    while (m/^-./s) {
		if (s/^-n/-/) {
		    $dryrun=1;
		} elsif (s/^-D/-/) {
		    open DEBUG, ">&STDERR" or die $!;
		    $debug++;
		} elsif (s/^-c(.*=.*)//s) {
		    push @git, '-c', $1;
		} elsif (s/^-C(.*)//s) {
		    $changesfile = $1;
		} elsif (s/^-k(.*)//s) {
		    $keyid=$1;
		} else {
		    die "$_ ?";
		}
	    }
	}
    }
}

parseopts();
die unless @ARGV;
my $cmd = shift @ARGV;
parseopts();

{ no strict qw(refs); &{"cmd_$cmd"}(); }
